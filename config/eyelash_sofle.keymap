#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    xTab: xTab {
        compatible = "zmk,behavior-mod-morph";
        label = "XTAB";
        bindings = <&kp LEFT_WIN>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    xShiftonSpace: xShiftonSpace {
        compatible = "zmk,behavior-mod-morph";
        label = "XSHIFTONSPACE";
        bindings = <&kp SPACE>, <&zFast_Mod LEFT_SHIFT SPACE>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
        keep-mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
    };

    xEntertab: xEntertab {
        compatible = "zmk,behavior-mod-morph";
        label = "XENTERTAB";
        bindings = <&zFast_Mod LGUI ENTER>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    ySpacecap: ySpacecap {
        compatible = "zmk,behavior-tap-dance";
        label = "YSPACECAP";
        #binding-cells = <0>;
        bindings = <&kp SPACE>, <&caps_word>;

        tapping-term-ms = <200>;
    };

    yOutput: yOutput {
        compatible = "zmk,behavior-tap-dance";
        label = "YOUTPUT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&out OUT_BLE>, <&out OUT_USB>;
    };

    zFastLayer: zFastLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFASTLAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    xF4: xF4 {
        compatible = "zmk,behavior-mod-morph";
        label = "XF4";
        bindings = <&zFast_Mod LEFT_SHIFT MINUS>, <&kp F4>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    yPower: yPower {
        compatible = "zmk,behavior-tap-dance";
        label = "YPOWER";
        #binding-cells = <0>;
        bindings = <&ext_power EP_ON>, <&ext_power EP_OFF>;

        tapping-term-ms = <300>;
    };

    yBtClear: yBtClear {
        compatible = "zmk,behavior-tap-dance";
        label = "YBTCLEAR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&none>, <&none>, <&bt BT_CLR>;
    };

    zFast_Mod: zFast_Mod {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFAST_MOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        hold-while-undecided;
    };

    yOff: yOff {
        compatible = "zmk,behavior-tap-dance";
        label = "YOFF";
        #binding-cells = <0>;
        bindings = <&kp LG(L)>, <&soft_off>;

        tapping-term-ms = <300>;
    };

    yBacklight: yBacklight {
        compatible = "zmk,behavior-tap-dance";
        label = "YBACKLIGHT";
        #binding-cells = <0>;
        bindings = <&bl BL_ON>, <&bl BL_OFF>;
    };

    yColour: yColour {
        compatible = "zmk,behavior-tap-dance";
        label = "YCOLOUR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings =
            <&rgb_ug RGB_COLOR_HSB(0,0,58)>,
            <&rgb_ug RGB_COLOR_HSB(269,87,84)>,
            <&rgb_ug RGB_COLOR_HSB(173,36,27)>;
    };

    stickylayer: stickylayer {
        compatible = "zmk,behavior-hold-tap";
        label = "STICKYLAYER";
        bindings = <&mo>, <&sl>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        hold-while-undecided;
    };

    z2layer: z2layer {
        compatible = "zmk,behavior-hold-tap";
        label = "Z2LAYER";
        bindings = <&mo>, <&to>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    capsShift: capsShift {
        compatible = "zmk,behavior-hold-tap";
        label = "CAPSSHIFT";
        bindings = <&kp>, <&caps_word>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    xTabLayer: xTabLayer {
        compatible = "zmk,behavior-mod-morph";
        label = "XTABLAYER";
        bindings = <&zFastLayer 10 ENTER>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    ztestysticky: ztestysticky {
        compatible = "zmk,behavior-hold-tap";
        label = "ZTESTYSTICKY";
        bindings = <&kp>, <&sk>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        paren_open {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 9>;
            layers = <5 0 4 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        paren_close {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 10>;
            layers = <5 0 4 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        quote_all {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <10 8>;
            layers = <5 0 4 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <24 25>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <32 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <37 39>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        meta {
            bindings = <&kp LEFT_GUI>;
            key-positions = <7 8>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        meta2 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <5 4>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <23 25 24>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        percentage {
            bindings = <&kp PERCENT>;
            key-positions = <37 39 38>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <23 25>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <17 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <2 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <30 32>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        divide {
            bindings = <&kp SLASH>;
            key-positions = <30 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <3 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <3 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        bracket_close {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        bracket_open {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <26 25>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <1 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <22 23>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        shift2 {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <18 17>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        alt2 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <36 37>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };

        alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <33 32>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4 3>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };

        alt_modlayer: alt_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 12>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LALT>,
                <&macro_release>,
                <&mo 12>;
        };

        ctrl_modlayer: ctrl_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 12>,
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_CONTROL>,
                <&macro_release>,
                <&mo 12>;

            label = "CTRL_MODLAYER";
        };

        gui_modlayer: gui_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 12>,
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_release>,
                <&mo 12>;

            label = "GUI_MODLAYER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_10 {
            display-name = "cole2";
            bindings = <
&kp GRAVE                  &kp N1              &kp N2                   &kp N3     &kp N4          &kp N5    &mmv MOVE_Y(-400)  &kp N6               &kp N7                       &kp N8            &kp N9           &kp N0        &kp BACKSPACE
&kp TAB                    &kp Q               &kp W                    &kp F      &kp P           &kp G     &mmv MOVE_Y(400)   &kp J                &kp L                        &kp U             &kp Y            &kp SEMI      &kp BSLH
&xF4                       &kp A               &kp R                    &kp S      &kp T           &kp D     &mmv MOVE_X(-400)  &kp H                &kp N                        &kp E             &kp I            &kp O         &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &kp Z               &kp X                    &kp C      &kp V           &kp B     &mmv MOVE_X(400)   &kp K                &kp M                        &kp COMMA         &kp DOT          &kp FSLH      &zFastLayer 7 MINUS
&to 4                      &stickylayer 11 11  &capsShift LEFT_SHIFT 0  &kp SPACE  &xShiftonSpace  &mo 11    &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &stickylayer 5 9  &kp RIGHT_SHIFT  &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        default_layer {
            bindings = <
&kp GRAVE                  &kp N1     &kp N2                   &kp N3                          &kp N4          &kp N5    &mmv MOVE_Y(-400)  &kp N6               &kp N7                       &kp N8            &kp N9           &kp N0        &kp BACKSPACE
&kp TAB                    &kp Q      &kp W                    &kp F                           &kp P           &kp G     &mmv MOVE_Y(400)   &kp J                &kp L                        &kp U             &kp Y            &kp SEMI      &kp BSLH
&xF4                       &kp A      &kp R                    &kp S                           &kp T           &kp D     &mmv MOVE_X(-400)  &kp H                &kp N                        &kp E             &kp I            &kp O         &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &kp Z      &kp X                    &kp C                           &kp V           &kp B     &mmv MOVE_X(400)   &kp K                &kp M                        &kp COMMA         &kp DOT          &kp FSLH      &stickylayer 8 8
&to 4                      &kp LCTRL  &capsShift LEFT_SHIFT 0  &zFast_Mod LEFT_CONTROL ESCAPE  &xShiftonSpace  &xTab     &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &stickylayer 5 9  &kp RIGHT_SHIFT  &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
            display-name = "cole";
        };

        layer_qwerty {
            display-name = "qwerty";
            bindings = <
&kp GRAVE                  &kp N1     &kp N2                   &kp N3                          &kp N4          &kp N5    &mmv MOVE_Y(-400)  &kp N6               &kp N7                       &kp N8            &kp N9           &kp N0        &kp BACKSPACE
&kp TAB                    &kp Q      &kp W                    &kp E                           &kp R           &kp T     &mmv MOVE_Y(400)   &kp Y                &kp U                        &kp I             &kp O            &kp P         &kp BSLH
&xF4                       &kp A      &kp S                    &kp D                           &kp F           &kp G     &mmv MOVE_X(-400)  &kp H                &kp J                        &kp K             &kp L            &kp O         &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &kp Z      &kp X                    &kp C                           &kp V           &kp B     &mmv MOVE_X(400)   &kp N                &kp M                        &kp COMMA         &kp DOT          &kp FSLH      &stickylayer 8 8
&to 4                      &kp LCTRL  &capsShift LEFT_SHIFT 0  &zFast_Mod LEFT_CONTROL ESCAPE  &xShiftonSpace  &xTab     &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &stickylayer 5 9  &kp RIGHT_SHIFT  &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        layer_game {
            bindings = <
&kp ESCAPE        &kp N1  &kp N2     &kp N3     &kp N4                &kp N5       &kp UP     &kp N6               &kp N7     &kp N8                       &kp N9   &kp N0        &kp BSPC
&kp TAB           &kp Q   &kp W      &kp F      &kp P                 &kp G        &kp DOWN   &kp J                &kp L      &kp U                        &kp Y    &kp SEMI      &kp BSLH
&kp LEFT_CONTROL  &kp A   &kp R      &kp S      &kp T                 &kp D        &kp LEFT   &kp H                &kp N      &kp E                        &kp I    &kp O         &kp SQT
&kp LSHFT         &kp Z   &kp X      &kp C      &kp V                 &kp B        &kp RIGHT  &kp K                &kp M      &kp COMMA                    &kp DOT  &kp FSLH      &zFastLayer 10 MINUS
&kp C_MUTE        &mo 8   &kp SPACE  &kp SPACE  &zFastLayer 6 ESCAPE  &kp TILDE    &kp SPACE  &zFastLayer 5 ENTER  &kp SPACE  &zFast_Mod LEFT_SHIFT SPACE  &trans   &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "game";
        };

        layer_entry {
            bindings = <
&kp ESCAPE    &kp BACKSPACE   &kp DELETE  &kp LEFT_PARENTHESIS            &kp RIGHT_PARENTHESIS  &kp LC(V)     &mmv MOVE_Y(-400)  &mkp LCLK            &mkp RCLK      &kp PG_DN         &kp PG_UP   &kp LC(R)      &kp LC(Z)
&kp TAB       &kp COMMA       &kp N1      &kp N2                          &kp N3                 &kp LC(C)     &mmv MOVE_Y(400)   &kp ASTERISK         &kp TAB        &kp RET           &kp ESCAPE  &kp BACKSPACE  &kp DELETE
&kp EQUAL     &kp N0          &kp N4      &kp N5                          &kp N6                 &kp LC(F)     &mmv MOVE_X(-400)  &kp MINUS            &kp LEFT       &kp DOWN          &kp UP      &kp RIGHT      &kp SQT
&kp LEFT_ALT  &kp DOT         &kp N7      &kp N8                          &kp N9                 &kp LC(X)     &mmv MOVE_X(400)   &kp FSLH             &kp BACKSLASH  &kp END           &kp HOME    &trans         &zFastLayer 1 SEMI
&to 1         &kp LEFT_SHIFT  &kp LEFT    &zFast_Mod LEFT_CONTROL ESCAPE  &kp RIGHT              &xTabLayer    &none              &zFastLayer 5 ENTER  &kp SPACE      &stickylayer 5 9  &trans      &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN>;
            label = "entry";
        };

        layer_sym {
            bindings = <
&kp ESCAPE                   &kp F1        &kp F2          &kp F3                          &kp F4     &kp F5                        &kp LC(R)  &kp F6               &kp F7                &kp F8                 &kp F9         &kp F10       &kp BACKSPACE
&kp TAB                      &kp GRAVE     &kp N1          &kp N2                          &kp N3     &kp STAR                      &kp LC(Z)  &kp QUESTION         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND  &kp AT_SIGN   &kp BACKSLASH
&zFast_Mod LEFT_ALT MINUS    &kp N0        &kp N4          &kp N5                          &kp N6     &kp LS(PLUS)                  &none      &kp EXCLAMATION      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp POUND      &kp DOLLAR    &zFastLayer 1 F11
&zFast_Mod LEFT_SHIFT COMMA  &kp PERIOD    &kp N7          &kp N8                          &kp N9     &kp FSLH                      &none      &kp CARET            &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL      &kp QUESTION  &zFastLayer 7 F12
&kp ENTER                    &kp LEFT_ALT  &kp LEFT_SHIFT  &zFast_Mod LEFT_CONTROL ESCAPE  &kp SPACE  &zFast_Mod LEFT_META ENTER    &none      &zFastLayer 6 ENTER  &kp LEFT_SHIFT        &stickylayer 5 9       &none          &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
            label = "sym";
        };

        layer_nav {
            bindings = <
&none             &none              &none             &none              &none             &none          &mmv MOVE_Y(-400)  &mkp LCLK            &mkp RCLK                    &none             &none     &none         &kp BACKSPACE
&kp TAB           &kp COMMA          &kp N1            &kp N2             &mkp LCLK         &kp PERCENT    &mmv MOVE_Y(400)   &msc SCRL_UP         &kp PG_DN                    &kp END           &kp HOME  &kp PG_UP     &kp DEL
&kp EQUAL         &mmv MOVE_X(-400)  &mmv MOVE_Y(400)  &mmv MOVE_Y(-400)  &mmv MOVE_X(400)  &kp DOLLAR     &mmv MOVE_X(-400)  &msc SCRL_DOWN       &kp LEFT                     &kp DOWN          &kp UP    &kp RIGHT     &kp RET
&none             &kp DOT            &kp N7            &kp N8             &kp N9            &kp V          &mmv MOVE_X(400)   &none                &kp PG_DN                    &kp END           &kp HOME  &kp PG_UP     &none
&kp C_PLAY_PAUSE  &none              &none             &mkp RCLK          &mkp LCLK         &xEntertab     &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &stickylayer 5 9  &none     &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp C_FAST_FORWARD C_REWIND>;
            label = "nav";
        };

        layer_fn {
            bindings = <
&bt BT_SEL 0  &none   &none  &none  &none  &bt BT_SEL 4    &rgb_ug RGB_SAI  &yPower               &none                 &none  &none  &none         &bt BT_CLR
&bt BT_SEL 1  &to 10  &to 1  &to 2  &to 3  &bt BT_SEL 4    &rgb_ug RGB_SAD  &none                 &none                 &none  &none  &none         &none
&bt BT_SEL 2  &to 0   &to 4  &to 5  &to 6  &none           &rgb_ug RGB_BRD  &yBacklight           &none                 &none  &none  &none         &bl BL_TOG
&bt BT_SEL 3  &to 10  &to 7  &to 8  &to 9  &yOutput        &rgb_ug RGB_BRI  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none  &none  &none         &yBtClear
&kp C_MUTE    &none   &none  &none  &none  &none           &yColour         &to 6                 &none                 &to 4  &to 1  &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "fn";
        };

        layer_fkey {
            bindings = <
&kp GRAVE                  &none  &kp F10                  &kp F11                         &kp F12         &kp F13    &none  &none                &none             &none            &none         &none          &kp A
&kp TAB                    &none  &kp F1                   &kp F2                          &kp F3          &kp F14    &none  &none                &none             &none            &none         &none          &none
&xF4                       &none  &kp F4                   &kp F5                          &kp F6          &kp F15    &none  &none                &kp LEFT_CONTROL  &kp LEFT_SHIFT   &kp LEFT_ALT  &kp LEFT_META  &none
&zFast_Mod LEFT_ALT EQUAL  &none  &kp F7                   &kp F8                          &kp F9          &kp F16    &none  &none                &none             &none            &none         &none          &kp CAPSLOCK
&none                      &none  &capsShift LEFT_SHIFT 0  &zFast_Mod LEFT_CONTROL ESCAPE  &xShiftonSpace  &xTab      &none  &zFastLayer 5 ENTER  &kp SPACE         &kp PRINTSCREEN  &none         &z2layer 7 1
            >;

            label = "fkey";
        };

        layer_ql {
            bindings = <
&none  &none      &none         &none       &none          &none        &none  &none                &none          &none             &none         &none         &none
&none  &none      &none         &none       &kp LS(POUND)  &none        &none  &none                &kp BSLH       &none             &none         &caps_word    &none
&none  &kp MINUS  &kp LS(PLUS)  &kp EQUAL   &kp LS(PRCNT)  &none        &none  &none                &kp LS(QMARK)  &kp LS(EXCL)      &kp LS(DLLR)  &kp LS(AT)    &kp N2
&none  &none      &none         &none       &none          &none        &none  &none                &none          &none             &none         &none         &none
&none  &none      &none         &kp ESCAPE  &none          &kp ENTER    &none  &zFastLayer 6 ENTER  &kp SPACE      &stickylayer 5 9  &none         &z2layer 7 1
            >;

            label = "ql";
        };

        l_tempmain {
            display-name = "colet";
            bindings = <
&kp GRAVE                  &kp N1     &kp N2                   &kp N3     &kp N4                          &kp N5    &mmv MOVE_Y(-400)  &kp N6               &kp N7                       &kp N8                       &kp N9           &kp N0        &kp BACKSPACE
&kp TAB                    &kp Q      &kp W                    &kp F      &kp P                           &kp G     &mmv MOVE_Y(400)   &kp J                &kp L                        &kp U                        &kp Y            &kp SEMI      &kp BSLH
&xF4                       &kp A      &kp R                    &kp S      &kp T                           &kp D     &mmv MOVE_X(-400)  &kp H                &kp N                        &kp E                        &kp I            &kp O         &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &kp Z      &kp X                    &kp C      &kp V                           &kp B     &mmv MOVE_X(400)   &kp K                &kp M                        &kp COMMA                    &kp DOT          &kp FSLH      &stickylayer 8 8
&to 4                      &kp LCTRL  &capsShift LEFT_SHIFT 0  &kp SPACE  &zFast_Mod LEFT_CONTROL ESCAPE  &xTab     &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &zFast_Mod LEFT_SHIFT SPACE  &kp RIGHT_SHIFT  &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        testy {
            bindings = <
&none  &none             &none           &none         &none         &none     &none  &kp A  &kp B                            &none         &none           &none                                    &none
&none  &kp A             &none           &none         &none         &none     &none  &none  &none                            &none         &none           &none                                    &none
&none  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_GUI  &none     &none  &none  &ztestysticky LEFT_GUI LEFT_GUI  &sk LEFT_ALT  &sk LEFT_SHIFT  &ztestysticky LEFT_CONTROL LEFT_CONTROL  &none
&none  &none             &none           &none         &none         &none     &none  &none  &none                            &none         &none           &none                                    &zFastLayer 7 MINUS
&none  &none             &none           &none         &none         &gresc    &none  &none  &none                            &none         &none           &none
            >;
        };

        layer_12 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans          &trans    &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans          &trans    &trans     &trans
&trans  &none   &trans  &trans  &trans  &trans    &trans  &trans  &kp LEFT_META  &kp LEFT_SHIFT  &kp LALT  &kp LCTRL  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans          &trans    &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans          &trans    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        ltesty {
            if-layers = <0 11>;
            then-layer = <12>;
        };
    };
};
