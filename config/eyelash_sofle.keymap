#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    // ------------------------------------------------------------------------------
    //				   conditions
    // ------------------------------------------------------------------------------
    // ------------------------------------------------------------------------------
    //				    testing
    // ------------------------------------------------------------------------------
    // ------------------------------------------------------------------------------
    //				   behaviors
    // ------------------------------------------------------------------------------

    zHomeMod: zHomeMod {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMEMOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    zHomeLayer: zHomeLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMELAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    xTab: xTab {
        compatible = "zmk,behavior-mod-morph";
        label = "XTAB";
        bindings = <&kp LEFT_WIN>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    xShiftonSpace: xShiftonSpace {
        compatible = "zmk,behavior-mod-morph";
        label = "XSHIFTONSPACE";
        bindings = <&kp SPACE>, <&zFast_Mod LEFT_SHIFT SPACE>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
        keep-mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
    };

    xEntertab: xEntertab {
        compatible = "zmk,behavior-mod-morph";
        label = "XENTERTAB";
        bindings = <&zFast_Mod LGUI ENTER>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    ySpacecap: ySpacecap {
        compatible = "zmk,behavior-tap-dance";
        label = "YSPACECAP";
        #binding-cells = <0>;
        bindings = <&kp SPACE>, <&caps_word>;

        tapping-term-ms = <200>;
    };

    yOutput: yOutput {
        compatible = "zmk,behavior-tap-dance";
        label = "YOUTPUT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&out OUT_BLE>, <&out OUT_USB>;
    };

    zFastLayer: zFastLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFASTLAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    xF4: xF4 {
        compatible = "zmk,behavior-mod-morph";
        label = "XF4";
        bindings = <&zFast_Mod LEFT_CONTROL LEFT_GUI>, <&kp F4>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    yPower: yPower {
        compatible = "zmk,behavior-tap-dance";
        label = "YPOWER";
        #binding-cells = <0>;
        bindings = <&ext_power EP_ON>, <&ext_power EP_OFF>;

        tapping-term-ms = <300>;
    };

    yBtClear: yBtClear {
        compatible = "zmk,behavior-tap-dance";
        label = "YBTCLEAR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&none>, <&none>, <&bt BT_CLR>;
    };

    zFast_Mod: zFast_Mod {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFAST_MOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        hold-while-undecided;
    };

    yOff: yOff {
        compatible = "zmk,behavior-tap-dance";
        label = "YOFF";
        #binding-cells = <0>;
        bindings = <&kp LG(L)>, <&soft_off>;

        tapping-term-ms = <300>;
    };

    yBacklight: yBacklight {
        compatible = "zmk,behavior-tap-dance";
        label = "YBACKLIGHT";
        #binding-cells = <0>;
        bindings = <&bl BL_ON>, <&bl BL_OFF>;
    };

    yColour: yColour {
        compatible = "zmk,behavior-tap-dance";
        label = "YCOLOUR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings =
            <&rgb_ug RGB_COLOR_HSB(0,0,58)>,
            <&rgb_ug RGB_COLOR_HSB(269,87,84)>,
            <&rgb_ug RGB_COLOR_HSB(173,36,27)>;
    };

    stickylayer: stickylayer {
        compatible = "zmk,behavior-hold-tap";
        label = "STICKYLAYER";
        bindings = <&mo>, <&sl>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        hold-while-undecided;
    };

    z2layer: z2layer {
        compatible = "zmk,behavior-hold-tap";
        label = "Z2LAYER";
        bindings = <&mo>, <&to>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    zSlowLayer: zSlowLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZSLOWLAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <180>;
        quick-tap-ms = <150>;
        flavor = "tap-preferred";
    };

    zHome_alt: zHome_alt {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOME_ALT";
        bindings = <&alt_modlayer>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    zHome_ctrl: zHome_ctrl {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOME_CTRL";
        bindings = <&ctrl_modlayer>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    zHome_gui: zHome_gui {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOME_GUI";
        bindings = <&gui_modlayer>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    bl_up: bl_up {
        compatible = "zmk,behavior-tap-dance";
        label = "Backlight Up";
        #binding-cells = <0>;
        bindings = <&bl BL_INC>, <&bl_on_max>;

        tapping-term-ms = <150>;
    };

    bl_down: bl_down {
        compatible = "zmk,behavior-tap-dance";
        label = "Backlight Down";
        #binding-cells = <0>;
        bindings = <&bl BL_DEC>, <&bl BL_SET 40>;

        tapping-term-ms = <150>;
    };

    bt_1: bt_1 {
        compatible = "zmk,behavior-tap-dance";
        label = "bt_1";
        #binding-cells = <0>;
        bindings = <&bt BT_SEL 1>, <&bt BT_DISC 1>;

        tapping-term-ms = <150>;
    };

    bt_0: bt_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "BT_0";
        #binding-cells = <0>;
        bindings = <&bt BT_SEL 0>, <&bt BT_DISC 0>;

        tapping-term-ms = <150>;
    };

    bt_2: bt_2 {
        compatible = "zmk,behavior-tap-dance";
        label = "BT_2";
        #binding-cells = <0>;
        bindings = <&bt BT_SEL 2>, <&bt BT_DISC 2>;

        tapping-term-ms = <150>;
    };

    bt_3: bt_3 {
        compatible = "zmk,behavior-tap-dance";
        label = "BT_3";
        #binding-cells = <0>;
        bindings = <&bt BT_SEL 3>, <&bt BT_DISC 3>;

        tapping-term-ms = <150>;
    };

    bt_4: bt_4 {
        compatible = "zmk,behavior-tap-dance";
        label = "BT_4";
        #binding-cells = <0>;
        bindings = <&bt BT_SEL 4>, <&bt BT_DISC 4>;

        tapping-term-ms = <150>;
    };

    bt_5: bt_5 {
        compatible = "zmk,behavior-tap-dance";
        label = "BT_5";
        #binding-cells = <0>;
        bindings = <&bt BT_SEL 5>, <&bt BT_DISC 5>;

        tapping-term-ms = <150>;
    };

    zhomemod_r: zhomemod_r {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMEMOD_R";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
        hold-trigger-key-positions = <18 31 44 42 43 30 17 16 29 28 15 4 5 2 3 1 13 0 14 27 26 56 57 55 54 53 41 40 39 52 59 60 61 62 63 6 58 19 32 45>;
    };

    zhomemod_l: zhomemod_l {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMEMOD_L";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
        hold-trigger-key-positions = <57 56 52 19 58 32 45 6 59 60 61 63 11 20 21 22 23 24 33 34 35 36 37 46 47 48 49 50 60 61 62 63 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 53 54 55>;
    };

    zhomelayer_r: zhomelayer_r {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMELAYER_R";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
        hold-trigger-key-positions = <0 1 2 3 4 5 6 13 14 15 16 17 18 19 26 27 28 29 30 31 32 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 60 61 62 63>;
    };

    zhomelayer_l: zhomelayer_l {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMELAYER_L";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
        hold-trigger-key-positions = <6 7 8 9 10 11 12 19 20 21 22 23 24 25 32 33 34 35 36 37 38 45 46 47 48 49 50 51 52 58 61 62 63 53 54 55 56 57 59 60>;
    };

    xTabSpace: xTabSpace {
        compatible = "zmk,behavior-mod-morph";
        label = "XTABSPACE";
        bindings = <&kp SPACE>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    xTabModl: xTabModl {
        compatible = "zmk,behavior-mod-morph";
        label = "XTABMODL";
        bindings = <&zFastLayer 13 F13>, <&kp LS(TAB)>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    xTabGuiF13: xTabGuiF13 {
        compatible = "zmk,behavior-mod-morph";
        label = "XTABGUIF13";
        bindings = <&zFast_Mod LEFT_GUI F13>, <&kp LS(TAB)>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    // ------------------------------------------------------------------------------
    //				     combos
    // ------------------------------------------------------------------------------

    combos {
        compatible = "zmk,combos";

        paren_open {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 9>;
            layers = <5 0 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        paren_close {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 10>;
            layers = <5 0 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        quote_all {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <10 8>;
            layers = <5 0 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <24 25>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <32 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <37 39>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        meta {
            bindings = <&kp LEFT_GUI>;
            key-positions = <7 8>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        meta2 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <5 4>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <23 25 24>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        percentage {
            bindings = <&kp PERCENT>;
            key-positions = <37 39 38>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <23 25>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <17 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <2 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <30 32>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        divide {
            bindings = <&kp SLASH>;
            key-positions = <30 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <3 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <3 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        bracket_close {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        bracket_open {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <26 25>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <1 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <22 23>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        shift2 {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <18 17>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        alt2 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <36 37>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };

        alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <33 32>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <5 0 4>;
        };
    };

    // ------------------------------------------------------------------------------
    //				     macros
    // ------------------------------------------------------------------------------

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };

        alt_modlayer: alt_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 10>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LALT>,
                <&macro_release>,
                <&mo 10>;
        };

        ctrl_modlayer: ctrl_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 11>,
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_CONTROL>,
                <&macro_release>,
                <&mo 11>;

            label = "CTRL_MODLAYER";
        };

        gui_modlayer: gui_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 12>,
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_release>,
                <&mo 12>;

            label = "GUI_MODLAYER";
        };

        bl_on_max: bl_setting {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bl BL_ON &bl BL_SET 100>;
            label = "BL_SETTING";
        };
    };

    behaviors {
    };

    // ------------------------------------------------------------------------------
    //				    keymaps
    // ------------------------------------------------------------------------------

    keymap {
        compatible = "zmk,keymap";

        l_cole {
            display-name = "cole";
            bindings = <
&kp ESCAPE                 &kp N1          &kp N2        &kp N3     &kp N4      &kp N5                  &kp UP_ARROW     &kp N6               &kp N7                       &kp N8                    &kp N9   &kp N0    &kp LC(BACKSPACE)
&kp TAB                    &kp Q           &kp W         &kp F      &kp P       &kp G                   &kp DOWN_ARROW   &kp J                &kp L                        &kp U                     &kp Y    &kp SEMI  &kp BACKSPACE
&xF4                       &kp A           &kp R         &kp S      &kp T       &kp D                   &kp LEFT_ARROW   &kp H                &kp N                        &kp E                     &kp I    &kp O     &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &kp Z           &kp X         &kp C      &kp V       &kp B                   &kp RIGHT_ARROW  &kp K                &kp M                        &kp COMMA                 &kp DOT  &kp FSLH  &zFastLayer 7 MINUS
&to 0                      &kp LEFT_SHIFT  &kp LEFT_GUI  &xTabModl  &xTabSpace  &zFastLayer 5 ESCAPE    &none            &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &zFastLayer 14 BACKSPACE  &none    &none
            >;

            //sensor-bindings = <&scroll_morph>;

            sensor-bindings = <&inc_dec_kp A B>;
        };

        l_hrm {
            bindings = <
&kp ESCAPE                 &kp N1                      &kp N2                    &kp N3                  &kp N4           &kp N5                  &mmv MOVE_Y(-400)  &kp N6               &kp N7                       &kp N8                    &kp N9                    &kp N0                      &kp LC(BACKSPACE)
&kp TAB                    &zHome_alt 0 Q              &zHome_ctrl 0 W           &zHome_gui 0 F          &zHomeLayer 8 P  &kp G                   &mmv MOVE_Y(400)   &kp J                &kp L                        &kp U                     &zHomeLayer 9 Y           &kp SEMI                    &kp BACKSPACE
&xF4                       &zhomemod_l LEFT_CONTROL A  &zhomemod_l LEFT_SHIFT R  &zhomemod_l LEFT_ALT S  &zhomemod_l T T  &kp D                   &mmv MOVE_X(-400)  &kp H                &zhomemod_r LEFT_GUI N       &zhomemod_r LEFT_ALT E    &zhomemod_r LEFT_SHIFT I  &zhomemod_r LEFT_CONTROL O  &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &zHomeLayer 15 Z            &zhomelayer_l 5 X         &zhomelayer_l 6 C       &kp V            &kp B                   &mmv MOVE_X(400)   &kp K                &kp M                        &kp COMMA                 &kp DOT                   &zHomeLayer 15 SLASH        &zFastLayer 7 MINUS
&to 0                      &kp LEFT_SHIFT              &kp LEFT_GUI              &xTabModl               &xTabSpace       &zFastLayer 5 ESCAPE    &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &zFastLayer 14 BACKSPACE  &none                     &none
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
            display-name = "HRM";
        };

        l_pcole {
            display-name = "pcole";
            bindings = <
&kp ESCAPE                 &kp N1          &kp N2                    &kp N3       &kp N4      &kp N5                  &mmv MOVE_Y(-400)  &kp N6               &kp N7                       &kp N8                   &kp N9   &kp N0    &kp LC(BACKSPACE)
&kp TAB                    &kp Q           &kp W                     &kp F        &kp P       &kp G                   &mmv MOVE_Y(400)   &kp J                &kp L                        &kp U                    &kp Y    &kp SEMI  &kp BACKSPACE
&xF4                       &kp A           &kp R                     &kp S        &kp T       &kp D                   &mmv MOVE_X(-400)  &kp H                &kp N                        &kp E                    &kp I    &kp O     &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &kp Z           &kp X                     &kp C        &kp V       &kp B                   &mmv MOVE_X(400)   &kp K                &kp M                        &kp COMMA                &kp DOT  &kp FSLH  &zFastLayer 7 MINUS
&to 0                      &kp LEFT_SHIFT  &zFastLayer 13 BACKSPACE  &xTabGuiF13  &xTabSpace  &zFastLayer 5 ESCAPE    &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &zFast_Mod LEFT_GUI F13  &none    &none
            >;

            sensor-bindings = <&inc_dec_kp A B>;
        };

        l_qwerty {
            display-name = "qwerty";
            bindings = <
&kp ESCAPE                 &kp N1          &kp N2                    &kp N3       &kp N4      &kp N5                  &mmv MOVE_Y(-400)  &kp N6               &kp N7                       &kp N8                   &kp N9   &kp N0    &kp LC(BACKSPACE)
&kp TAB                    &kp Q           &kp W                     &kp E        &kp R       &kp T                   &mmv MOVE_Y(400)   &kp Y                &kp U                        &kp I                    &kp O    &kp P     &kp BACKSPACE
&xF4                       &kp A           &kp S                     &kp D        &kp F       &kp G                   &mmv MOVE_X(-400)  &kp H                &kp J                        &kp K                    &kp L    &kp SEMI  &kp APOS
&zFast_Mod LEFT_ALT EQUAL  &kp Z           &kp X                     &kp C        &kp V       &kp B                   &mmv MOVE_X(400)   &kp N                &kp M                        &kp COMMA                &kp DOT  &kp FSLH  &zFastLayer 7 MINUS
&to 0                      &kp LEFT_SHIFT  &zFastLayer 13 BACKSPACE  &xTabGuiF13  &xTabSpace  &zFastLayer 5 ESCAPE    &none              &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &zFast_Mod LEFT_GUI F13  &none    &none
            >;

            sensor-bindings = <&inc_dec_kp A B>;
        };

        l_game {
            bindings = <
&kp ESCAPE        &kp N1  &kp N2     &kp N3     &kp N4        &kp N5       &kp UP     &kp N6               &kp N7                       &kp N8                    &kp N9   &kp N0        &kp BSPC
&kp TAB           &kp Q   &kp W      &kp F      &kp P         &kp G        &kp DOWN   &kp J                &kp L                        &kp U                     &kp Y    &kp SEMI      &kp BSLH
&kp LEFT_CONTROL  &kp A   &kp R      &kp S      &kp T         &kp D        &kp LEFT   &kp H                &kp N                        &kp E                     &kp I    &kp O         &kp SQT
&kp LSHFT         &kp Z   &kp X      &kp C      &kp V         &kp B        &kp RIGHT  &kp K                &kp M                        &kp COMMA                 &kp DOT  &kp FSLH      &zFastLayer 7 MINUS
&kp C_MUTE        &mo 8   &kp SPACE  &kp SPACE  &kp LEFT_ALT  &kp TILDE    &kp SPACE  &zFastLayer 6 ENTER  &zFast_Mod LEFT_SHIFT SPACE  &zFastLayer 14 BACKSPACE  &trans   &kp LEFT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "game";
        };

        layer_sym {
            bindings = <
&kp ESCAPE         &kp N1        &kp N2          &kp N3                          &kp N4             &kp N5                        &kp LC(R)  &kp N6               &kp N7                &kp N8                 &kp N9     &kp N0         &kp DELETE
&kp TAB            &kp PERCENT   &kp MINUS       &kp LESS_THAN                   &kp GREATER_THAN   &kp PLUS                      &kp LC(Z)  &kp PIPE             &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON  &kp SEMICOLON  &kp BSPC
&kp DOUBLE_QUOTES  &kp CARET     &kp DOLLAR      &kp LEFT_BRACKET                &kp RIGHT_BRACKET  &kp AT_SIGN                   &none      &kp EXCLAMATION      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EQUAL  &kp ASTERISK   &kp SINGLE_QUOTE
&none              &kp HASH      &kp UNDERSCORE  &kp AMPERSAND                   &kp BACKSLASH      &kp GRAVE                     &none      &kp TILDE            &kp SLASH             &kp PERIOD             &kp COMMA  &kp QUESTION   &mo 7
&kp ENTER          &kp LEFT_ALT  &kp LEFT_SHIFT  &zFast_Mod LEFT_CONTROL ESCAPE  &kp SPACE          &zFast_Mod LEFT_META ENTER    &none      &zFastLayer 6 ENTER  &kp LEFT_SHIFT        &stickylayer 5 9       &none      &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
            label = "sym";
        };

        layer_nav {
            bindings = <
&none             &kp HASH   &kp UNDERSCORE  &kp EXCLAMATION  &kp EQUAL        &kp PERCENT                       &mmv MOVE_Y(-400)  &kp AMPERSAND        &kp LEFT_PARENTHESIS        &kp RIGHT_PARENTHESIS  &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSPACE
&kp TAB           &kp COMMA  &kp N1          &kp N2           &kp N3           &kp LC(X)                         &mmv MOVE_Y(400)   &kp ASTERISK         &kp HOME                    &kp PAGE_UP            &kp PAGE_DOWN  &kp END           &kp BACKSPACE
&kp LEFT_SHIFT    &kp N0     &kp N4          &kp N5           &kp N6           &kp LC(C)                         &mmv MOVE_X(-400)  &kp PLUS             &kp LEFT                    &kp DOWN               &kp UP         &kp RIGHT         &kp RET
&kp LALT          &kp DOT    &kp N7          &kp N8           &kp N9           &kp LC(V)                         &mmv MOVE_X(400)   &kp MINUS            &kp TAB                     &kp ENTER              &kp ESCAPE     &kp DELETE        &zFastLayer 7 SLASH
&kp C_PLAY_PAUSE  &none      &none           &kp LEFT_ARROW   &kp RIGHT_ARROW  &zFast_Mod LEFT_CONTROL ESCAPE    &none              &zFastLayer 6 ENTER  &zHomeMod LEFT_SHIFT SPACE  &zFastLayer 0 TAB      &kp K_APP      &none
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
            label = "nav";
        };

        layer_fn {
            bindings = <
&bt_0            &none  &none  &none  &none  &bt_4       &rgb_ug RGB_SAI  &bl BL_INC            &bl BL_DEC            &none  &none  &none         &bt BT_CLR
&bt_1            &none  &to 0  &to 2  &to 1  &bt_5       &rgb_ug RGB_SAD  &none                 &none                 &none  &none  &none         &none
&bt_2            &to 0  &to 0  &to 5  &to 4  &none       &rgb_ug RGB_BRD  &yBacklight           &none                 &none  &none  &none         &to 0
&bt_3            &to 0  &to 7  &to 8  &to 6  &yOutput    &rgb_ug RGB_BRI  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none  &none  &none         &to 7
&rgb_ug RGB_TOG  &none  &none  &none  &none  &none       &yColour         &none                 &none                 &none  &none  &z2layer 7 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "fn";
        };

        l_f1 {
            bindings = <
&none    &none    &none   &none   &none   &none    &none  &none  &none     &none            &none      &none      &none
&kp TAB  &kp F11  &kp F1  &kp F2  &kp F3  &none    &none  &none  &none     &none            &none      &none      &none
&xF4     &kp F10  &kp F4  &kp F5  &kp F6  &none    &none  &none  &kp LGUI  &kp LALT         &kp LSHFT  &kp LCTRL  &none
&none    &kp F12  &kp F7  &kp F8  &kp F9  &none    &none  &none  &none     &none            &none      &none      &mo 7
&none    &none    &none   &none   &none   &none    &none  &none  &none     &kp PRINTSCREEN  &none      &none
            >;

            label = "f1";
        };

        layer_ql {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none     &none         &none    &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &kp DEL   &kp LC(DEL)   &kp RET  &none  &kp PRINTSCREEN
&none  &none  &none  &none  &none  &none    &none  &none  &kp BSPC  &kp LC(BSPC)  &none    &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none     &none         &none    &none  &mo 7
&none  &none  &none  &none  &none  &none    &none  &none  &none     &none         &none    &none
            >;

            label = "ql";
        };

        l_alt {
            bindings = <
&none  &none  &none      &none        &none      &none      &none  &none      &none     &none      &none      &none      &none
&none  &none  &kp LCTRL  &none        &kp D      &kp F4     &none  &kp P      &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none
&none  &none  &kp LSHFT  &kp LS(TAB)  &kp TAB    &none      &none  &none      &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none
&none  &none  &none      &none        &none      &none      &none  &none      &none     &none      &none      &none      &mo 7
&none  &none  &none      &kp ESC      &kp SPACE  &kp RET    &none  &kp ENTER  &none     &none      &none      &none
            >;
        };

        l_ctrl {
            label = "ctrl";
            bindings = <
&none           &none           &none  &none        &none      &none      &none  &none      &none     &none      &none      &none      &none
&kp LS(ESCAPE)  &kp LEFT_SHIFT  &none  &kp Z        &kp Y      &kp Q      &none  &kp T      &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp PRINTSCREEN
&kp LA(DEL)     &kp A           &none  &kp LS(TAB)  &kp TAB    &kp W      &none  &kp BSPC   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none
&none           &none           &none  &kp P        &kp LS(N)  &kp N      &kp N  &none      &kp C     &kp V      &kp X      &kp A      &mo 7
&none           &none           &none  &kp ESC      &kp SPACE  &kp RET    &none  &kp ENTER  &none     &none      &none      &none
            >;
        };

        l_gui {
            label = "gui";
            bindings = <
&none        &none        &none      &none    &none      &none      &none  &none      &none      &none      &none      &none       &none
&kp ESC      &kp LCTRL    &kp LSHFT  &none    &kp E      &kp Q      &none  &none      &kp HOME   &kp PG_DN  &kp PG_UP  &kp END     &kp PRINTSCREEN
&kp LA(DOT)  &kp LS(TAB)  &kp LS(S)  &none    &kp TAB    &kp W      &none  &kp PLUS   &kp LEFT   &kp DOWN   &kp RIGHT  &kp UP      &kp PAUSE_BREAK
&kp X        &kp P        &kp LC(D)  &kp M    &kp D      &kp L      &none  &kp MINUS  &kp R      &kp V      &none      &kp LC(N4)  &mo 7
&none        &none        &none      &kp ESC  &kp SPACE  &kp RET    &none  &kp RET    &kp LSHFT  &none      &none      &none
            >;
        };

        l_modl {
            label = "mod l";
            bindings = <
&trans  &trans         &trans          &trans         &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans                   &trans
&trans  &alt_modlayer  &ctrl_modlayer  &gui_modlayer  &mo 8     &trans    &trans  &trans  &trans  &trans  &trans  &zHomeLayer 9 SEMICOLON  &none
&trans  &kp LCTRL      &kp LSHFT       &kp LALT       &kp LGUI  &trans    &trans  &trans  &trans  &trans  &trans  &trans                   &trans
&trans  &trans         &trans          &trans         &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans                   &mo 7
&trans  &trans         &trans          &trans         &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        l_modr {
            label = "mod r";
            bindings = <
&trans  &trans          &trans           &trans          &trans           &trans    &trans  &trans  &trans    &trans    &trans     &trans     &trans
&trans  &zHome_alt 0 Q  &zHome_ctrl 0 W  &zHome_gui 0 F  &zHomeLayer 8 P  &trans    &trans  &trans  &trans    &trans    &trans     &mo 9      &trans
&trans  &trans          &trans           &trans          &trans           &trans    &trans  &trans  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &trans
&trans  &trans          &trans           &trans          &trans           &trans    &trans  &trans  &trans    &trans    &trans     &trans     &mo 7
&trans  &trans          &trans           &trans          &trans           &trans    &trans  &trans  &trans    &trans    &trans     &trans
            >;
        };

        l_repeat {
            label = "repeat";
            bindings = <
&kp ESCAPE        &kp N1  &kp N2     &kp N3            &kp N4     &kp N5          &kp UP     &kp N6     &kp N7          &kp N8     &kp N9   &kp N0    &kp BSPC
&kp TAB           &kp Q   &kp W      &kp F             &kp P      &kp G           &kp DOWN   &kp J      &kp L           &kp U      &kp Y    &kp SEMI  &kp BSLH
&kp LEFT_CONTROL  &kp A   &kp R      &kp S             &kp T      &kp D           &kp LEFT   &kp H      &kp N           &kp E      &kp I    &kp O     &kp SQT
&kp LSHFT         &kp Z   &kp X      &kp C             &kp V      &kp B           &kp RIGHT  &kp K      &kp M           &kp COMMA  &kp DOT  &kp FSLH  &zFastLayer 7 MINUS
&kp C_MUTE        &none   &kp SPACE  &kp LEFT_CONTROL  &kp SPACE  &kp LEFT_GUI    &kp SPACE  &kp ENTER  &kp LEFT_SHIFT  &none      &none    &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        l_func {
            label = "func";
            bindings = <
&kp ESCAPE  &none      &none      &none     &kp PAUSE_BREAK  &kp PRINTSCREEN    &none  &none  &none     &none      &none      &none      &none
&none       &none      &none      &none     &none            &none              &none  &none  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp PRINTSCREEN
&none       &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI         &none              &none  &none  &kp LGUI  &kp LALT   &kp LSHFT  &kp LCTRL  &none
&none       &none      &none      &none     &none            &none              &none  &none  &none     &none      &none      &none      &mo 7
&none       &none      &none      &none     &none            &none              &none  &none  &none     &none      &none      &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
