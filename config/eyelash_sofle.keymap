#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    xTab: xTab {
        compatible = "zmk,behavior-mod-morph";
        label = "XTAB";
        bindings = <&kp LEFT_WIN>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    xShiftonSpace: xShiftonSpace {
        compatible = "zmk,behavior-mod-morph";
        label = "XSHIFTONSPACE";
        bindings = <&kp SPACE>, <&zFast_Mod LEFT_SHIFT SPACE>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
        keep-mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
    };

    xEntertab: xEntertab {
        compatible = "zmk,behavior-mod-morph";
        label = "XENTERTAB";
        bindings = <&zFast_Mod LGUI ENTER>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    ySpacecap: ySpacecap {
        compatible = "zmk,behavior-tap-dance";
        label = "YSPACECAP";
        #binding-cells = <0>;
        bindings = <&kp SPACE>, <&caps_word>;

        tapping-term-ms = <200>;
    };

    yOutput: yOutput {
        compatible = "zmk,behavior-tap-dance";
        label = "YOUTPUT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&out OUT_BLE>, <&out OUT_USB>;
    };

    zFastLayer: zFastLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFASTLAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    xF4: xF4 {
        compatible = "zmk,behavior-mod-morph";
        label = "XF4";
        bindings = <&zFast_Mod LEFT_SHIFT MINUS>, <&kp F4>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    yPower: yPower {
        compatible = "zmk,behavior-tap-dance";
        label = "YPOWER";
        #binding-cells = <0>;
        bindings = <&ext_power EP_ON>, <&ext_power EP_OFF>;

        tapping-term-ms = <300>;
    };

    yBtClear: yBtClear {
        compatible = "zmk,behavior-tap-dance";
        label = "YBTCLEAR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&none>, <&none>, <&bt BT_CLR>;
    };

    zFast_Mod: zFast_Mod {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFAST_MOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        hold-while-undecided;
    };

    yOff: yOff {
        compatible = "zmk,behavior-tap-dance";
        label = "YOFF";
        #binding-cells = <0>;
        bindings = <&kp LG(L)>, <&soft_off>;

        tapping-term-ms = <300>;
    };

    yBacklight: yBacklight {
        compatible = "zmk,behavior-tap-dance";
        label = "YBACKLIGHT";
        #binding-cells = <0>;
        bindings = <&bl BL_ON>, <&bl BL_OFF>;
    };

    yColour: yColour {
        compatible = "zmk,behavior-tap-dance";
        label = "YCOLOUR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings =
            <&rgb_ug RGB_COLOR_HSB(0,0,58)>,
            <&rgb_ug RGB_COLOR_HSB(269,87,84)>,
            <&rgb_ug RGB_COLOR_HSB(173,36,27)>;
    };

    stickylayer: stickylayer {
        compatible = "zmk,behavior-hold-tap";
        label = "STICKYLAYER";
        bindings = <&mo>, <&sl>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        hold-while-undecided;
    };

    z2layer: z2layer {
        compatible = "zmk,behavior-hold-tap";
        label = "Z2LAYER";
        bindings = <&mo>, <&to>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE   &kp N1     &kp N2          &kp N3                          &kp N4          &kp N5    &mmv MOVE_Y(-400)  &kp N6               &kp N7     &kp N8            &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q      &kp W           &kp F                           &kp P           &kp G     &mmv MOVE_Y(400)   &kp J                &kp L      &kp U             &kp Y            &kp SEMI    &kp BSLH
&kp CAPS    &kp A      &kp R           &kp S                           &kp T           &kp D     &mmv MOVE_X(-400)  &kp H                &kp N      &kp E             &kp I            &kp O       &kp APOS
&kp LSHFT   &kp Z      &kp X           &kp C                           &kp V           &kp B     &mmv MOVE_X(400)   &kp K                &kp M      &kp COMMA         &kp DOT          &kp FSLH    &stickylayer 6 6
&kp C_MUTE  &kp LCTRL  &kp LEFT_SHIFT  &zFast_Mod LEFT_CONTROL ESCAPE  &xShiftonSpace  &xTab     &none              &zFastLayer 4 ENTER  &kp SPACE  &stickylayer 5 4  &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "cole";
        };

        layer_qwerty {
            display-name = "qwerty";
            bindings = <
&kp GRAVE   &kp N1     &kp N2          &kp N3                          &kp N4          &kp N5    &kp UP_ARROW     &kp N6               &kp N7     &kp N8            &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q      &kp W           &kp E                           &kp R           &kp T     &kp DOWN_ARROW   &kp Y                &kp U      &kp I             &kp O            &kp P       &kp BSLH
&kp CAPS    &kp A      &kp S           &kp D                           &kp F           &kp G     &kp LEFT_ARROW   &kp H                &kp J      &kp K             &kp L            &kp O       &kp APOS
&kp LSHFT   &kp Z      &kp X           &kp C                           &kp V           &kp B     &kp RIGHT_ARROW  &kp N                &kp M      &kp COMMA         &kp DOT          &kp FSLH    &stickylayer 0 0
&kp C_MUTE  &kp LCTRL  &kp LEFT_SHIFT  &zFast_Mod LEFT_CONTROL ESCAPE  &xShiftonSpace  &xTab     &kp ENTER        &zFastLayer 0 ENTER  &kp SPACE  &stickylayer 0 0  &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_game {
            bindings = <
&kp GRAVE         &kp N1  &kp N2  &kp N3     &kp N4     &kp N5    &kp UP     &kp N6               &kp N7     &kp N8            &kp N9   &kp N0    &kp BSPC
&kp TAB           &kp Q   &kp W   &kp F      &kp P      &kp G     &kp DOWN   &kp J                &kp L      &kp U             &kp Y    &kp SEMI  &trans
&kp LEFT_CONTROL  &kp A   &kp R   &kp S      &kp T      &kp D     &kp LEFT   &kp H                &kp N      &kp E             &kp I    &kp O     &trans
&kp LSHFT         &kp Z   &kp X   &kp C      &kp V      &kp B     &kp RIGHT  &kp K                &kp M      &kp COMMA         &kp DOT  &kp FSLH  &trans
&kp C_MUTE        &trans  &mo 0   &kp SPACE  &kp SPACE  &trans    &kp SPACE  &zFastLayer 4 ENTER  &kp SPACE  &stickylayer 0 4  &trans   &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_entry {
            bindings = <
&kp ESCAPE    &trans          &trans                          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LC(V)              &kp UP     &kp STAR             &trans         &kp PG_DN  &kp PG_UP   &kp LC(R)      &kp LC(Z)
&kp TAB       &kp COMMA       &kp N1                          &kp N2                &kp N3                 &kp LC(C)              &kp DOWN   &kp PLUS             &kp TAB        &kp RET    &kp ESCAPE  &kp BACKSPACE  &kp DELETE
&kp EQUAL     &kp N0          &kp N4                          &kp N5                &kp N6                 &kp LC(F)              &kp LEFT   &kp MINUS            &kp LEFT       &kp DOWN   &kp UP      &kp RIGHT      &kp SQT
&kp LEFT_ALT  &kp DOT         &kp N7                          &kp N8                &kp N9                 &kp LC(X)              &kp RIGHT  &kp FSLH             &kp BACKSLASH  &kp END    &kp HOME    &trans         &zFastLayer 0 SEMI
&kp C_MUTE    &kp LEFT_SHIFT  &zFast_Mod LEFT_CONTROL ESCAPE  &kp LEFT              &kp RIGHT              &zFastLayer 0 ENTER    &kp RET    &zFastLayer 0 ENTER  &kp SPACE      &trans     &trans      &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_sym {
            bindings = <
&kp  &kp F1        &kp F2          &kp F3                          &kp F4     &kp F5                        &kp  &kp F6     &kp F7                &kp F8                 &kp F9         &kp F10       &kp
&kp  &kp GRAVE     &kp N1          &kp N2                          &kp N3     &kp STAR                      &kp  &kp        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND  &kp AT_SIGN   &kp
&kp  &kp N0        &kp N4          &kp N5                          &kp N6     &kp LS(PLUS)                  &kp  &kp        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp POUND      &kp DOLLAR    &kp
&kp  &kp           &kp N7          &kp N8                          &kp N9     &kp FSLH                      &kp  &kp        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL      &kp QUESTION  &kp
&kp  &kp LEFT_ALT  &kp LEFT_SHIFT  &zFast_Mod LEFT_CONTROL ESCAPE  &kp SPACE  &zFast_Mod LEFT_META ENTER    &kp  &kp ENTER  &kp LEFT_SHIFT        &stickylayer 0 0       &kp            &to 0
            >;
        };

        layer_nav {
            bindings = <
&none      &none              &none             &none              &none             &none          &mmv MOVE_Y(-400)  &none             &mkp LCLK          &mkp RCLK         &mkp MB3           &none             &kp BACKSPACE
&kp TAB    &kp COMMA          &kp N1            &kp N2             &mkp LCLK         &kp PERCENT    &mmv MOVE_Y(400)   &msc MOVE_Y(-10)  &mmv MOVE_X(-400)  &mmv MOVE_X(400)  &mmv MOVE_X(-400)  &mmv MOVE_X(400)  &kp DEL
&kp EQUAL  &mmv MOVE_X(-400)  &mmv MOVE_Y(400)  &mmv MOVE_Y(-400)  &mmv MOVE_X(400)  &kp DOLLAR     &mmv MOVE_X(-400)  &msc MOVE_Y(10)   &kp LEFT           &kp DOWN          &kp UP             &kp RIGHT         &kp RET
&none      &kp DOT            &kp N7            &kp N8             &kp N9            &kp V          &mmv MOVE_X(400)   &none             &kp PG_DN          &kp END           &kp HOME           &kp PG_UP         &none
&none      &none              &none             &mkp RCLK          &mkp LCLK         &xEntertab     &mkp LCLK          &none             &none              &none             &none              &none
            >;
        };

        layer_6 {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &to 3  &to 0
            >;
        };
    };
};
